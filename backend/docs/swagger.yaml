basePath: /
definitions:
  dtos.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dtos.UserInput:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  users.User:
    properties:
      created_at:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: alvanxp@outlook.com
    name: Alvaro Carpio Paredes
  description: API REST in Golang with Gin Framework
  license:
    name: MIT
    url: https://users_api/blob/master/LICENSE
  version: "1.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: login User
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: login User with username and password and get jwt token
  /api/login/register:
    post:
      consumes:
      - application/json
      description: Register User
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: ""
      summary: register User based on username and password
  /api/users:
    get:
      description: Get Users
      parameters:
      - description: Username
        in: query
        name: username
        type: string
      - description: Firstname
        in: query
        name: firstname
        type: string
      - description: Lastname
        in: query
        name: lastname
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/users.User'
              type: array
            type: array
      security:
      - ApiKeyAuth: []
      summary: Retrieves users based on query
  /api/users/{id}:
    get:
      description: get User by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      security:
      - ApiKeyAuth: []
      summary: Retrieves user based on given ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
